#pragma kernel GenerateHeight
#pragma kernel InitSnowTotals
#pragma kernel AddSnowHeight
#pragma kernel ClearSnowTotals
#pragma kernel PopulateGrid
#pragma kernel ComputeForces
#pragma kernel ApplyForces
#pragma kernel ResampleDensity
#pragma kernel UpdateSnowTotals
#pragma kernel SetPressure
#pragma kernel ClearGrid
#include "../Scripts/Noises.cginc"

#define PI2 6.28318530718f
#define G 9.81f

struct Cell
{
    int3 gridIndex;
    int index;
    float3 WSposition;
    float indentAmount;
    float xCompressionAmount;
    float3 pressure;
    float hardness;
    float3 appliedPressure;
    float density;
    float temperature;
    float grainSize;
    float mass;
    float massOver;
    int isOccupied; 
};

struct CollisionData
{
    float3 position;
    float3 pressure;
};

struct ColumnData
{
    float height;
    float groundHeight;
    float mass;
    float mass_temp;
};

// Data buffers:
 RWStructuredBuffer<Cell> cellGridBuffer;
 RWStructuredBuffer<ColumnData> snowTotalsBuffer;
 RWStructuredBuffer<CollisionData> collisionsBuffer;

// TextureMaps:
shared RWTexture2D<float4> GroundHeightMap;
shared RWTexture2D<float4> Debug;

// Grid related varibales:
int texResolution;
float planeSideSize;
float3 planeCenter;
int cellBufferLength;
int3 gridDimensions;
float cellSize;
float3 gridCenter;

// Simulation related variables
float time;
float deltaTime;
float simulationSpeed;
float timeScale;
float V_cell;
float snowAddedHeight;
float airTemperature;
float groundTemperature;
float maxSnowDensity;
float freshSnowDensity;

//float h_d_p;
//float h_c_p;
float kN;
//float k_c_p;

// Helper functions:
float fsmooth(float x, float z)
{
    return z * (1.0 - 1.0 / (x / z + 1.0));
}

int2 posTocoords(float3 position)
{
    float mapX = ((-position.x + planeSideSize / 2.0f - planeCenter.x) / (float) planeSideSize);
    float mapY = ((-position.z + planeSideSize / 2.0f - planeCenter.z) / (float) planeSideSize);
    int2 coords = int2(round(mapX * (texResolution - 1.0f)), round(mapY * (texResolution - 1.0f)));
    return coords;
}

int getGridIndexFromPosition(float3 position)
{
    int3 cellId = round(floor(position / (float) cellSize) - (gridCenter - ((float3) gridDimensions) * 0.5f) - float3(cellSize / 4.0f, cellSize / 4.0f, cellSize / 4.0f));
    int index = cellId.x + gridDimensions.x * cellId.y + gridDimensions.y * gridDimensions.x * cellId.z;
    return clamp(index, 0, cellBufferLength - 1);
}

bool isWithinGrid(float3 position)
{
    float3 boundsMin = gridCenter - ((float3) gridDimensions) * 0.5f * cellSize;
    float3 boundsMax = gridCenter + ((float3) gridDimensions) * 0.5f * cellSize;
    
    if (
        (position.x < boundsMin.x) || (position.x > boundsMax.x) ||
        (position.y < boundsMin.y) || (position.y > boundsMax.y) ||
        (position.z < boundsMin.z) || (position.z > boundsMax.z))
    {
        return false;
    }
    return true;
}

uint3 clipCellId(uint3 id)
{
    uint3 index_3d = id;
    index_3d.x = min(max(index_3d.x, 0), gridDimensions.x - 1);
    index_3d.y = min(max(index_3d.y, 0), gridDimensions.y - 1);
    index_3d.z = min(max(index_3d.z, 0), gridDimensions.z - 1);
    
    return index_3d;
}

uint indexTextToArray(uint2 id)
{
    uint index = (id.x) + texResolution * (id.y);
    return index;
}

uint indexTexToGrid(uint3 id)
{
    float3 cell_id_ratio;
    uint3 cell_id;
    cell_id_ratio.x = ((float) id.x / (float) (texResolution - 1));
    cell_id_ratio.y = ((float) id.y / (float) (texResolution - 1));
    
    cell_id.x = round(cell_id_ratio.x * (gridDimensions.x - 1));
    cell_id.z = round(cell_id_ratio.y * (gridDimensions.z - 1));
    cell_id.y = id.z;
    
    uint index = cell_id.x + gridDimensions.x * cell_id.y + gridDimensions.y * gridDimensions.x * cell_id.z;
    return index;
}

[numthreads(32, 32, 1)]
void GenerateHeight(uint3 id : SV_DispatchThreadID)
{
    float2 uv = float2((float) id.x / (float) (texResolution - 1), (float) id.y / (float) (texResolution - 1));
    float heightMap = 0.0f;
    GroundHeightMap[id.xy] = float4(heightMap.xxx, 0.0f);
    snowTotalsBuffer[indexTextToArray(id.xy)].groundHeight = heightMap;
    Debug[id.xy] = float4(heightMap.xxx, 0.0f);
}

[numthreads(32, 32, 1)]
void InitSnowTotals(uint3 id : SV_DispatchThreadID)
{
    snowTotalsBuffer[indexTextToArray(id.xy)].height = snowAddedHeight; // init column heights
    snowTotalsBuffer[indexTextToArray(id.xy)].mass = 0.0f; // init column masses
}

// Helper kernels - called when needed:
[numthreads(32, 32, 1)]
void ClearSnowTotals(uint3 id : SV_DispatchThreadID)
{
    snowTotalsBuffer[indexTextToArray(id.xy)].mass = 0.0f; // clear mass
    snowTotalsBuffer[indexTextToArray(id.xy)].mass_temp = 0.0f; // clear mass
}

[numthreads(32, 32, 1)]
void AddSnowHeight(uint3 id : SV_DispatchThreadID)
{
    snowTotalsBuffer[indexTextToArray(id.xy)].height += snowAddedHeight; 
}

// Simulation kernels - called every frame:
[numthreads(10, 10, 10)]
void PopulateGrid(uint3 id : SV_DispatchThreadID)
{
    int index = id.x + gridDimensions.x * id.y + gridDimensions.y * gridDimensions.x * id.z;
    Cell cell = cellGridBuffer[index];
    cell.WSposition = (float3((float) id.x + (float) cellSize / 4.0f, (float) id.y + (float) cellSize / 4.0f, (float) id.z + (float) cellSize / 4.0f) + (gridCenter - (float3) gridDimensions * 0.5f)) * cellSize;
    int2 coords = posTocoords(cell.WSposition);
    float groundLevel = GroundHeightMap[coords].x + planeCenter.y;
    float snowLevel = groundLevel + snowTotalsBuffer[indexTextToArray(coords)].height;
    
    if (cell.WSposition.y < groundLevel + cellSize * 0.5f)
    {
        cell.isOccupied = -2; //below ground
        cell.density = 0.0f;
        cell.temperature = groundTemperature;
    }
    else if (cell.WSposition.y < snowLevel + cellSize * 0.5f)
    {
        if (cell.isOccupied == -1) //if new snow is added
        {
            cell.density = freshSnowDensity;
            cell.temperature = airTemperature;
        }
        cell.isOccupied = 1; //below snow surface but above ground - inside snow pack
        float density = cell.density;
        float temperature = cell.temperature;
        float unit_conversion = 1;
        density *= unit_conversion;
        cell.hardness = -0.16599 + 0.542153 * density - 0.08925 * temperature + 0.447667 * pow(density, 2) + 0.159256 * density * temperature - 0.01336 * pow(temperature, 2) + 0.261043 * pow(temperature, 3) - 0.15863 * pow(density, 2) * temperature + 0.022601 * density * pow(temperature, 2) - 0.00032 * pow(temperature, 3);
        }
    else
    {
        cell.isOccupied = -1; //free
        cell.density = 0.0f; //air
        cell.temperature = airTemperature;
    }
    cell.mass = cell.density * V_cell;
    cellGridBuffer[index] = cell;
}

[numthreads(25, 1, 25)]
void ComputeForces(uint3 id : SV_DispatchThreadID)
{   
    Cell cell;
    float area = cellSize * cellSize;
    float massOver = 0.0f;
    for (int i = 49; i >= 0; i--)
    {
        id.y = i;
        int index = id.x + gridDimensions.x * id.y + gridDimensions.y * gridDimensions.x * id.z; //iterate top to bottom
        cell = cellGridBuffer[index];
        if (cell.isOccupied > -2)
        {
            float3 upPos = cell.WSposition + float3(0, cellSize, 0);
            float3 appliedPressure = cell.appliedPressure;
            massOver += cell.mass;
            cell.pressure = float3(0, -(massOver * G) / area, 0) + appliedPressure;
            cellGridBuffer[index] = cell;
        }
    }
}

[numthreads(10, 10, 10)]
void ApplyForces(uint3 id : SV_DispatchThreadID)
{
    int index = id.x + gridDimensions.x * id.y + gridDimensions.y * gridDimensions.x * id.z;
    Cell cell = cellGridBuffer[index];
    cell.indentAmount = 0.0f;
    cell.xCompressionAmount = 0.0f;
    float pressure_y = cell.pressure.y;
    float3 pressure_dir = float3(0, 1, 0) * ((float) pressure_y / (float) abs(pressure_y));
    if (cell.density >= maxSnowDensity){
        cellGridBuffer[index] = cell;
        return;
    }
    float k_springCoefficient = abs(pow(cell.density, kN)); /* * pow(0.1f, k_c_p))*/
    float x = max((abs(pressure_y) - cell.hardness), 0.0f) / (float) k_springCoefficient; // alternative?
    x = abs(x);
    x *= deltaTime * timeScale;
    x = min(x, 0.99f * cellSize);
    if ((x > 0.0f) && (cell.isOccupied >- 1))
    {
        float cell_delimeter = abs(cellSize - x);
        float V_lower = cellSize * cellSize * cell_delimeter;
        float density_lower = (cell.density * V_cell) / (float) V_lower;
        float mass_lower = V_lower * density_lower;
        cell.mass = mass_lower;
        cell.density = density_lower;
        cell.indentAmount = x;
        cell.xCompressionAmount = x;
    }
    cellGridBuffer[index] = cell;
}


[numthreads(25, 1, 25)]
void ResampleDensity(uint3 id : SV_DispatchThreadID)
{
    Cell cell;
    Cell upperCell;
    for (int i = 0; i < 50;i++)
    {
        int index = id.x + gridDimensions.x * i + gridDimensions.y * gridDimensions.x * id.z; // bottom to top
        cell = cellGridBuffer[index];
        if (cell.isOccupied <= -1) return;
        float massPartial = cell.mass;
        float densityPartial = cell.density;
        float3 upPos = cell.WSposition + float3(0, cellSize, 0);
        int upperCellI = getGridIndexFromPosition(upPos);
        upperCell = cellGridBuffer[upperCellI];
        while ((isWithinGrid(upPos)) && (cell.indentAmount > 0.0f) && (densityPartial < maxSnowDensity))
        {
            upperCellI = getGridIndexFromPosition(upPos);
            upperCell = cellGridBuffer[upperCellI];
            if (upperCell.isOccupied > -1)
            {
                float upper_snow_height = cellSize - upperCell.indentAmount;
                float available_snow_height = max(min(cell.indentAmount, upper_snow_height), 0);
                float density_added = upperCell.density;
                
                upperCell.indentAmount += available_snow_height;
                upperCell.indentAmount = clamp(upperCell.indentAmount, 0.0f, cellSize);
                cell.indentAmount -= available_snow_height;
                cell.indentAmount = clamp(cell.indentAmount, 0.0f, cellSize);
                
                massPartial += density_added * cellSize * cellSize * available_snow_height;
                densityPartial = massPartial / (cellSize * cellSize * (cellSize - cell.indentAmount));
            }
            cellGridBuffer[upperCellI] = upperCell;
            upPos = upperCell.WSposition + float3(0, cellSize, 0);
        }
        float density = massPartial/V_cell;
        density = max(density, 0.0f);
        cell.mass = massPartial;
        cell.density = density;
        cellGridBuffer[index] = cell;
    }
}

[numthreads(32, 32, 1)]
void UpdateSnowTotals(uint3 id : SV_DispatchThreadID)
{
    int2 coords = id.xy;
    coords = int2(texResolution - 1, texResolution - 1) - coords;
    uint bufferIndex = indexTextToArray(coords);
    ColumnData snowColumnTotals = snowTotalsBuffer[bufferIndex];
    snowColumnTotals.mass = 0.0f;
    Cell cell;
    for (int i = 0; i < 50; i++)
    {
        id.z = i; // iterate bottom to top
        int cellIndex = indexTexToGrid(id);
        Cell cell = cellGridBuffer[cellIndex];
        float indentAmout = cell.xCompressionAmount;
        snowColumnTotals.height -= indentAmout;
        if (cell.isOccupied > -1)  snowColumnTotals.mass += cell.mass;
    }
    snowTotalsBuffer[bufferIndex] = snowColumnTotals;
}

[numthreads(1, 1, 1)]
void SetPressure(uint3 id : SV_DispatchThreadID)
{
    int index = id.x;
    CollisionData collision = collisionsBuffer[index];
    if (isWithinGrid(collision.position))
    {
        int cell_index = getGridIndexFromPosition(collision.position);
        Cell cell = cellGridBuffer[cell_index];
        cell.appliedPressure = collision.pressure;
        cellGridBuffer[cell_index] = cell;
    }
}

[numthreads(10, 10, 10)]
void ClearGrid(uint3 id : SV_DispatchThreadID)
{
    int index = id.x + gridDimensions.x * id.y + gridDimensions.y * gridDimensions.x * id.z;
    Cell cell = cellGridBuffer[index];
    cell.appliedPressure = float3(0.0f, 0.0f, 0.0f);
    cell.indentAmount = 0.0;
    cellGridBuffer[index] = cell;
}